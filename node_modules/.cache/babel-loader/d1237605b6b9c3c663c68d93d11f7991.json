{"ast":null,"code":"import _objectSpread from \"/Users/mikezapata/Developer/NW/GitHub/clicky-game/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/mikezapata/Developer/NW/GitHub/clicky-game/app/src/App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Header from './components/Header';\nimport Item from './components/Item';\nimport Footer from './components/Footer';\nimport characters from \"./characters.json\"; // import './App.css';\n\nclass App extends Component {\n  // Setting the initial state of the App component\n  constructor() {\n    super();\n    this.state = {\n      score: 0,\n      topScore: 0,\n      maxScore: 12,\n      message: \"Click a Waldo to begin!\",\n      messageClass: \"\",\n      characters: characters\n    };\n\n    this.shuffle = array => {\n      let currentIndex = array.length;\n      let tempVal;\n      let randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        tempVal = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = tempVal;\n      }\n\n      return array;\n    };\n\n    this.handleCorrectChoice = () => {\n      if (this.state.score + 1 > this.state.topScore) {\n        this.setState({\n          topScore: this.state.topScore + 1\n        });\n      }\n\n      if (this.state.score + 1 === this.state.maxScore) {\n        this.setState({\n          score: this.state.score + 1,\n          message: \"Congrats! You win!\",\n          messageClass: \"correct\"\n        });\n      } else {\n        this.setState({\n          score: this.state.score + 1,\n          message: \"You guessed correctly!\",\n          messageClass: \"correct\"\n        });\n      }\n    };\n\n    this.handleResetWin = currentCharacters => {\n      //if current score is at max reset score to 0 and topscore to 0\n      if (this.state.score + 1 === this.state.maxScore) {\n        this.setState({\n          score: 0,\n          topScore: 0\n        }); //reset clicked state for characters\n\n        const updatedCharacters = currentCharacters.map(ch => true ? _objectSpread({}, ch, {\n          isClicked: false\n        }) : ch);\n        return updatedCharacters;\n      } else {\n        return currentCharacters;\n      }\n    };\n\n    this.handleIncorect = () => {\n      //incorrect selection made, reset score to 0\n      this.setState({\n        score: 0,\n        message: \"You guessed incorrectly!\"\n      }); //reset clicked state for characters\n\n      const updatedCharacters = this.state.characters.map(ch => ch.isClicked === true ? _objectSpread({}, ch, {\n        isClicked: false\n      }) : ch);\n      return updatedCharacters;\n    };\n\n    this.handleCharacterShuffle = name => {\n      // this.handleResetWin();\n      var resetNeeded = false;\n      const characters = this.state.characters.map(ch => {\n        //ch.name === name ? { ...ch, isClicked: true } : ch\n        if (ch.name === name) {\n          if (ch.isClicked === false) {\n            this.handleCorrectChoice();\n            return _objectSpread({}, ch, {\n              isClicked: true\n            });\n          } else {\n            resetNeeded = true;\n            return _objectSpread({}, ch, {\n              isClicked: false\n            });\n          }\n        }\n\n        return ch;\n      });\n\n      if (resetNeeded) {\n        this.setState({\n          characters: this.shuffle(this.handleIncorect()),\n          messageClass: \"incorrect\"\n        });\n      } else {\n        //check if game is won before rendering characters\n        this.setState({\n          characters: this.shuffle(this.handleResetWin(characters))\n        });\n      }\n    };\n\n    this.handleRenderCharacters = () => {\n      return this.state.characters.map(character => React.createElement(Item, {\n        image: character.image,\n        name: character.name,\n        key: character.id,\n        onClick: this.handleCharacterShuffle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    };\n\n    this.handleCharacterShuffle = this.handleCharacterShuffle.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: this.state.score,\n      topscore: this.state.topScore,\n      message: this.state.message,\n      messageClass: this.state.messageClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.handleRenderCharacters()), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mikezapata/Developer/NW/GitHub/clicky-game/app/src/App.js"],"names":["React","Component","Navbar","Header","Item","Footer","characters","App","constructor","state","score","topScore","maxScore","message","messageClass","shuffle","array","currentIndex","length","tempVal","randomIndex","Math","floor","random","handleCorrectChoice","setState","handleResetWin","currentCharacters","updatedCharacters","map","ch","isClicked","handleIncorect","handleCharacterShuffle","name","resetNeeded","handleRenderCharacters","character","image","id","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Header from './components/Header';\nimport Item from './components/Item';\nimport Footer from './components/Footer';\nimport characters from \"./characters.json\";\n// import './App.css';\n\nclass App extends Component {\n    // Setting the initial state of the App component\n    constructor(){\n      super()\n  \n      this.handleCharacterShuffle = this.handleCharacterShuffle.bind(this)\n    }\n  \n    state = {\n      score: 0,\n      topScore: 0,\n      maxScore: 12,\n      message: \"Click a Waldo to begin!\",\n      messageClass: \"\",\n      characters: characters\n    };\n  \n    shuffle = (array) => {\n      let currentIndex = array.length;\n      let tempVal;\n      let randomIndex;\n  \n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n  \n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n  \n        // And swap it with the current element.\n        tempVal = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = tempVal;\n      }\n  \n      return array;\n    }\n  \n    handleCorrectChoice = () => {\n      \n      if (this.state.score+1 > this.state.topScore) {\n        this.setState({topScore: this.state.topScore+1})\n      }\n      if (this.state.score+1 === this.state.maxScore) {\n        this.setState({score: this.state.score+1, message: \"Congrats! You win!\", messageClass:\"correct\"})\n      }else{\n        this.setState({score: this.state.score+1, message: \"You guessed correctly!\", messageClass:\"correct\"})\n      }\n    }\n  \n    handleResetWin = (currentCharacters) => {\n      //if current score is at max reset score to 0 and topscore to 0\n      if (this.state.score+1 === this.state.maxScore) {\n        this.setState({score: 0, topScore: 0})\n        //reset clicked state for characters\n        const updatedCharacters = currentCharacters.map(ch => (true) ? { ...ch, isClicked: false } : ch)\n        return updatedCharacters\n      }else{\n        return currentCharacters\n      }\n    }\n  \n    handleIncorect = () => {\n      //incorrect selection made, reset score to 0\n      this.setState({score: 0, message: \"You guessed incorrectly!\"})\n      //reset clicked state for characters\n      const updatedCharacters = this.state.characters.map(ch => ch.isClicked === true ? { ...ch, isClicked: false } : ch)\n      return updatedCharacters\n    }\n  \n  \n    handleCharacterShuffle = (name) => {\n      // this.handleResetWin();\n      var resetNeeded = false;\n      const characters = this.state.characters.map(ch => {\n        //ch.name === name ? { ...ch, isClicked: true } : ch\n        if(ch.name === name) {\n          if (ch.isClicked === false) {\n            this.handleCorrectChoice()\n            return { ...ch, isClicked: true}\n          }else{\n            resetNeeded = true\n            return { ...ch, isClicked: false}\n          }\n        }\n        return ch\n      })\n  \n      if (resetNeeded) {\n        this.setState({\n          characters: this.shuffle(this.handleIncorect()),\n          messageClass:\"incorrect\"\n        })\n        \n      }else{\n        //check if game is won before rendering characters\n        this.setState({ characters: this.shuffle(this.handleResetWin(characters)) })\n      }\n      \n    }\n  \n    handleRenderCharacters = () => {\n      return this.state.characters.map((character) =>\n              <Item \n                image={character.image} \n                name={character.name} \n                key={character.id} \n                onClick={this.handleCharacterShuffle} \n              />\n            );\n    }\n  \n    render() {\n      return (\n        <div className=\"App\">\n          <Navbar\n            score={this.state.score}\n            topscore={this.state.topScore}\n            message={this.state.message}\n            messageClass={this.state.messageClass}\n          />\n          <Header />\n          <div className=\"content\">\n            {this.handleRenderCharacters()}\n          </div>\n          <Footer />\n        </div>\n      );\n    }\n  }\n  \n  export default App;\n  "]},"metadata":{},"sourceType":"module"}
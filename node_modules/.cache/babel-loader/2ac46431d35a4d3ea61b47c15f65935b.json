{"ast":null,"code":"import _objectSpread from \"/Users/mikezapata/Developer/NW/GitHub/clicky-game/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/mikezapata/Developer/NW/GitHub/clicky-game/app/src/App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Header from './components/Header';\nimport Item from './components/Item';\nimport Footer from './components/Footer';\nimport characters from \"./characters.json\";\nimport './App.css';\n\nclass App extends Component {\n  // Setting the initial state of the App component\n  constructor() {\n    super();\n    this.state = {\n      score: 0,\n      topScore: 0,\n      maxScore: 12,\n      message: \"Click a Waldo to begin!\",\n      messageClass: \"\",\n      characters: characters\n    };\n\n    this.shuffle = array => {\n      let currentIndex = array.length;\n      let tempVal;\n      let randomIndex;\n\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        tempVal = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = tempVal;\n      }\n\n      return array;\n    };\n\n    this.handleCorrectChoice = () => {\n      if (this.state.score + 1 > this.state.topScore) {\n        this.setState({\n          topScore: this.state.topScore + 1\n        });\n\n        if (this.state.score + 1 === this.state.maxScore) {\n          this.setState({\n            score: this.state.score + 1,\n            message: \"YOU WIN!!\",\n            messageClass: \"correct\"\n          });\n        } else {\n          this.state({\n            score: this.state.score + 1,\n            message: \"You guess right\",\n            messageClass: \"correct\"\n          });\n        }\n      } // handleResetWin = (currentCharacters) => {\n      // }\n\n    };\n\n    this.handleChararcterShuffle = name => {\n      // this.handleResetWin();\n      var resetNeeded = false;\n      const characters = this.state.characters.map(ch => {\n        //ch.name === name ? { ...ch, isClicked: true } : ch\n        if (ch.name === name) {\n          if (ch.isClicked === false) {\n            this.handleCorrectChoice();\n            return _objectSpread({}, ch, {\n              isClicked: true\n            });\n          } else {\n            resetNeeded = true;\n            return _objectSpread({}, ch, {\n              isClicked: false\n            });\n          }\n        }\n\n        return ch;\n      });\n\n      if (resetNeeded) {\n        this.setState({\n          characters: this.shuffle(this.handleIncorrectChoice()),\n          messageClass: \"incorrect\"\n        });\n      } else {\n        //check if game is won before rendering characters\n        this.setState({\n          characters: this.shuffle(this.handleResetWin(characters))\n        });\n      }\n    };\n\n    this.handleCharacterRender = () => {\n      return this.state.characters.map(character => React.createElement(Item, {\n        image: character.image,\n        name: character.name,\n        key: character.id,\n        onClick: this.handleCharacterShuffle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n    };\n\n    this.handleCharacterShuffle = this.handleCharacterShuffle.bind(this);\n  } //values\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      message: this.state.message,\n      messageClass: this.state.messageClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mikezapata/Developer/NW/GitHub/clicky-game/app/src/App.js"],"names":["React","Component","Navbar","Header","Item","Footer","characters","App","constructor","state","score","topScore","maxScore","message","messageClass","shuffle","array","currentIndex","length","tempVal","randomIndex","Math","floor","random","handleCorrectChoice","setState","handleChararcterShuffle","name","resetNeeded","map","ch","isClicked","handleIncorrectChoice","handleResetWin","handleCharacterRender","character","image","id","handleCharacterShuffle","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Header from './components/Header';\nimport Item from './components/Item';\nimport Footer from './components/Footer';\nimport characters from \"./characters.json\";\nimport './App.css';\n\nclass App extends Component {\n  // Setting the initial state of the App component\n  constructor() {\n    super()\n\n    this.handleCharacterShuffle = this.handleCharacterShuffle.bind(this)\n  }\n\n  //values\n  state = {\n    score: 0,\n    topScore: 0,\n    maxScore: 12,\n    message: \"Click a Waldo to begin!\",\n    messageClass: \"\",\n    characters: characters\n  };\n\n  shuffle = (array) => {\n    let currentIndex = array.length;\n    let tempVal;\n    let randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      tempVal = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = tempVal;\n    }\n    return array;\n  }\n\n\n  handleCorrectChoice = () => {\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({\n        topScore: this.state.topScore + 1\n      })\n      if (this.state.score + 1 === this.state.maxScore) {\n        this.setState({\n          score: this.state.score + 1,\n          message: \"YOU WIN!!\",\n          messageClass: \"correct\"\n        })\n      } else {\n        this.state({\n          score: this.state.score + 1,\n          message: \"You guess right\",\n          messageClass: \"correct\"\n        })\n      }\n    }\n    // handleResetWin = (currentCharacters) => {\n\n    // }\n\n  }\n\n\n\n\n\n  handleChararcterShuffle = (name) => {\n    // this.handleResetWin();\n    var resetNeeded = false;\n    const characters = this.state.characters.map(ch => {\n      //ch.name === name ? { ...ch, isClicked: true } : ch\n      if (ch.name === name) {\n        if (ch.isClicked === false) {\n          this.handleCorrectChoice()\n          return { ...ch, isClicked: true }\n        } else {\n          resetNeeded = true\n          return { ...ch, isClicked: false }\n        }\n      }\n      return ch\n    })\n\n    if (resetNeeded) {\n      this.setState({\n        characters: this.shuffle(this.handleIncorrectChoice()),\n        messageClass: \"incorrect\"\n      })\n\n    } else {\n      //check if game is won before rendering characters\n      this.setState({ characters: this.shuffle(this.handleResetWin(characters)) })\n    }\n\n  }\n\n  handleCharacterRender = () => {\n    return this.state.characters.map((character) =>\n      <Item\n        image={character.image}\n        name={character.name}\n        key={character.id}\n        onClick={this.handleCharacterShuffle} />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n          messageClass={this.state.messageClass}\n        />\n      </div>\n    )\n  }\n\n\n\n\n\n\n\n}\n\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}